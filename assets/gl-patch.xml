<?xml version="1.0" encoding="UTF-8"?>
<registry>
  <comment>
Unfortunately the Khronos OpenGL registry (gl.xml) has a number of errors and 
in many ways is not sufficient for creating a C++ OpenGL API wrapper.

This file is formatted the same way as gl.xml, and can be patched in to overwrite
the various errors or fill in the gaps in gl.xml. 

This is so that we never need to modify gl.xml directly, allowing us to replace it
with a newer version with impunity.
  </comment>

  <groups>
    <group name="FramebufferTarget" comment="used by glFramebufferRenderbuffer,glCheckFramebufferStatus,glBindFramebuffer,glGetFramebufferAttachmentParameteriv,glFramebufferTexture2D">
      <enum name="GL_DRAW_FRAMEBUFFER"/>
      <enum name="GL_READ_FRAMEBUFFER"/>
      <enum name="GL_FRAMEBUFFER"/>
    </group>
    <!-- TODO: why is the GLES2 C++ dumper dumping all of these values? only the DRAW ones should be dumped -->
    <group name="BufferUsageARB" comment="used by glBufferData">
      <enum name="GL_STREAM_DRAW"/>
      <enum name="GL_STREAM_READ"/>
      <enum name="GL_STREAM_COPY"/>
      <enum name="GL_STATIC_DRAW"/>
      <enum name="GL_STATIC_READ"/>
      <enum name="GL_STATIC_COPY"/>
      <enum name="GL_DYNAMIC_DRAW"/>
      <enum name="GL_DYNAMIC_READ"/>
      <enum name="GL_DYNAMIC_COPY"/>
    </group>
    <group name="BufferTargetARB" comment="used by glGetBufferParameteriv,glBindBuffer,glBufferData,glBufferSubData">
      <enum name="GL_ARRAY_BUFFER"/>
      <enum name="GL_ELEMENT_ARRAY_BUFFER"/>
      <enum name="GL_ATOMIC_COUNTER_BUFFER"/>
      <enum name="GL_COPY_READ_BUFFER"/>
      <enum name="GL_COPY_WRITE_BUFFER"/>
      <enum name="GL_DISPATCH_INDIRECT_BUFFER"/>
      <enum name="GL_DRAW_INDIRECT_BUFFER"/>
      <enum name="GL_PIXEL_PACK_BUFFER"/>
      <enum name="GL_PIXEL_UNPACK_BUFFER"/>
      <enum name="GL_QUERY_BUFFER"/>
      <enum name="GL_SHADER_STORAGE_BUFFER"/>
      <enum name="GL_TEXTURE_BUFFER"/>
      <enum name="GL_TRANSFORM_FEEDBACK_BUFFER"/>
      <enum name="GL_UNIFORM_BUFFER"/>
    </group>
    <group name="RenderbufferTarget" comment="used by glRenderbufferStorage,glFramebufferRenderbuffer,glBindRenderbuffer,glGetRenderbufferParameteriv">
      <enum name="GL_RENDERBUFFER"/>
    </group>
    <group name="FramebufferAttachment" comment="used by glFramebufferRenderbuffer,glFramebufferTexture2D,glGetFramebufferAttachmentParameteriv">
      <enum name="GL_COLOR_ATTACHMENT0"/>
      <enum name="GL_COLOR_ATTACHMENT1"/>
      <enum name="GL_COLOR_ATTACHMENT2"/>
      <enum name="GL_COLOR_ATTACHMENT3"/>
      <enum name="GL_COLOR_ATTACHMENT4"/>
      <enum name="GL_COLOR_ATTACHMENT5"/>
      <enum name="GL_COLOR_ATTACHMENT6"/>
      <enum name="GL_COLOR_ATTACHMENT7"/>
      <enum name="GL_COLOR_ATTACHMENT8"/>
      <enum name="GL_COLOR_ATTACHMENT9"/>
      <enum name="GL_COLOR_ATTACHMENT10"/>
      <enum name="GL_COLOR_ATTACHMENT11"/>
      <enum name="GL_COLOR_ATTACHMENT12"/>
      <enum name="GL_COLOR_ATTACHMENT13"/>
      <enum name="GL_COLOR_ATTACHMENT14"/>
      <enum name="GL_COLOR_ATTACHMENT15"/>
      <enum name="GL_DEPTH_ATTACHMENT"/>
      <enum name="GL_STENCIL_ATTACHMENT"/>
      <enum name="GL_DEPTH_STENCIL_ATTACHMENT"/>
    </group>
    <group name="StencilFaceDirection" comment="used by glStencilOpSeparate,glStencilMaskSeparate,glStencilFuncSeparate">
      <enum name="GL_BACK"/>
      <enum name="GL_FRONT"/>
      <enum name="GL_FRONT_AND_BACK"/>
    </group>
    <group name="VertexAttribPropertyARB" comment="used by glGetVertexAttribiv,glGetVertexAttribfv">
      <enum name="GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"/>
      <enum name="GL_VERTEX_ATTRIB_ARRAY_ENABLED"/>
      <enum name="GL_VERTEX_ATTRIB_ARRAY_SIZE"/>
      <enum name="GL_VERTEX_ATTRIB_ARRAY_STRIDE"/>
      <enum name="GL_VERTEX_ATTRIB_ARRAY_TYPE"/>
      <enum name="GL_VERTEX_ATTRIB_ARRAY_NORMALIZED"/>
      <enum name="GL_VERTEX_ATTRIB_ARRAY_INTEGER"/>
      <enum name="GL_VERTEX_ATTRIB_ARRAY_DIVISOR"/>
      <enum name="GL_CURRENT_VERTEX_ATTRIB"/>
    </group>
    <group name="VertexAttribPointerType" comment="used by glVertexAttribPointer">
      <enum name="GL_BYTE"/>
      <enum name="GL_UNSIGNED_BYTE"/>
      <enum name="GL_SHORT"/>
      <enum name="GL_UNSIGNED_SHORT"/>
      <enum name="GL_FIXED"/>
      <enum name="GL_FLOAT"/>
      <!-- todo: additional types http://docs.gl/gl4/glVertexAttribPointer -->
    </group>
    <group name="VertexAttribPointerPropertyARB" comment="used by glGetVertexAttribPointerv">
      <enum name="GL_VERTEX_ATTRIB_ARRAY_POINTER"/>
    </group>
    <group name="TextureComponentCount" comment="used by glTexImage2D">
      <!-- 
        todo: additional types above OpenGL ES 2.0: http://docs.gl/es3/glTexImage2D
        but they would add invalid types from the OpenGL ES2.0 namespace (e.g., GL_DEPTH_COMPONENT16)
        -->
      <enum name="GL_ALPHA"/>
      <enum name="GL_LUMINANCE"/>
      <enum name="GL_LUMINANCE_ALPHA"/>
      <enum name="GL_RGB"/>
      <enum name="GL_RGBA"/>

      <enum name="GL_BGRA_EXT"/>
      <enum name="GL_DEPTH_COMPONENT"/>
      <enum name="GL_DEPTH_STENCIL_OES"/>
    </group>
    <group name="PixelFormat" comment="used by glTexImage2D">
      <enum name="GL_ABGR_EXT"/>
      <enum name="GL_ALPHA"/>
      <enum name="GL_BLUE"/>
      <enum name="GL_CMYKA_EXT"/>
      <enum name="GL_CMYK_EXT"/>
      <enum name="GL_COLOR_INDEX"/>
      <enum name="GL_DEPTH_COMPONENT"/>
      <enum name="GL_GREEN"/>
      <enum name="GL_LUMINANCE"/>
      <enum name="GL_LUMINANCE_ALPHA"/>
      <enum name="GL_RED"/>
      <enum name="GL_RED_EXT"/>
      <enum name="GL_RGB"/>
      <enum name="GL_RGBA"/>
      <enum name="GL_STENCIL_INDEX"/>
      <enum name="GL_UNSIGNED_INT"/>
      <enum name="GL_UNSIGNED_SHORT"/>
      <enum name="GL_YCRCB_422_SGIX"/>
      <enum name="GL_YCRCB_444_SGIX"/>

      <enum name="GL_BGRA_EXT"/>
      <enum name="GL_DEPTH_COMPONENT"/>
      <enum name="GL_DEPTH_STENCIL_OES"/>
    </group>

    <group name="TextureUnit" comment="used by glActiveTexture">
      <enum name="GL_TEXTURE0"/>
      <enum name="GL_TEXTURE1"/>
      <enum name="GL_TEXTURE2"/>
      <enum name="GL_TEXTURE3"/>
      <enum name="GL_TEXTURE4"/>
      <enum name="GL_TEXTURE5"/>
      <enum name="GL_TEXTURE6"/>
      <enum name="GL_TEXTURE7"/>
      <enum name="GL_TEXTURE8"/>
      <enum name="GL_TEXTURE9"/>
      <enum name="GL_TEXTURE10"/>
      <enum name="GL_TEXTURE11"/>
      <enum name="GL_TEXTURE12"/>
      <enum name="GL_TEXTURE13"/>
      <enum name="GL_TEXTURE14"/>
      <enum name="GL_TEXTURE15"/>
      <enum name="GL_TEXTURE16"/>
      <enum name="GL_TEXTURE17"/>
      <enum name="GL_TEXTURE18"/>
      <enum name="GL_TEXTURE19"/>
      <enum name="GL_TEXTURE20"/>
      <enum name="GL_TEXTURE21"/>
      <enum name="GL_TEXTURE22"/>
      <enum name="GL_TEXTURE23"/>
      <enum name="GL_TEXTURE24"/>
      <enum name="GL_TEXTURE25"/>
      <enum name="GL_TEXTURE26"/>
      <enum name="GL_TEXTURE27"/>
      <enum name="GL_TEXTURE28"/>
      <enum name="GL_TEXTURE29"/>
      <enum name="GL_TEXTURE30"/>
      <enum name="GL_TEXTURE31"/>
    </group>
    <group name="BufferPNameARB" comment="used by glGetBufferParameteriv">
    <!-- TODO: incorporating these would result in invalid values in OpenGL ES 3.0
      <enum name="GL_BUFFER_ACCESS"/>
      <enum name="GL_BUFFER_MAPPED"/>
    -->
      <enum name="GL_BUFFER_SIZE"/>
      <enum name="GL_BUFFER_USAGE"/>
    </group>
    <group name="DrawElementsType" comment="used by glDrawElements">
    <!-- TODO: incorporating these would result in invalid values in OpenGL ES 3.0
         unless GL_OES_element_index_uint is supported
      <enum name="GL_UNSIGNED_INT"/>
    -->
      <enum name="GL_UNSIGNED_INT"/>
      <enum name="GL_UNSIGNED_BYTE"/>
      <enum name="GL_UNSIGNED_SHORT"/>
    </group>
    <group name="BlendEquationMode" comment="used by glBlendEquation">
      <enum name="GL_FUNC_ADD"/>
      <enum name="GL_FUNC_SUBTRACT"/>
      <enum name="GL_FUNC_REVERSE_SUBTRACT"/>
      <enum name="GL_MIN"/>
      <enum name="GL_MAX"/>
    </group>
    <group name="BlendEquationModeEXT" comment="used by glBlendEquationEXT, glBlendEquationSeparate, glBlendEquationSeparateEXT">
      <enum name="GL_FUNC_ADD"/>
      <enum name="GL_FUNC_SUBTRACT"/>
      <enum name="GL_FUNC_REVERSE_SUBTRACT"/>
      <enum name="GL_MIN"/>
      <enum name="GL_MAX"/>
    </group>

    <group name="BlendFuncSeparateParameterEXT" comment="used by glBlendFuncSeparate">
      <enum name="GL_ZERO"/>
      <enum name="GL_ONE"/>
      <enum name="GL_SRC_COLOR"/>
      <enum name="GL_ONE_MINUS_SRC_COLOR"/>
      <enum name="GL_DST_COLOR"/>
      <enum name="GL_ONE_MINUS_DST_COLOR"/>
      <enum name="GL_SRC_ALPHA"/>
      <enum name="GL_ONE_MINUS_SRC_ALPHA"/>
      <enum name="GL_DST_ALPHA"/>
      <enum name="GL_ONE_MINUS_DST_ALPHA"/>
      <enum name="GL_CONSTANT_COLOR"/>
      <enum name="GL_ONE_MINUS_CONSTANT_COLOR"/>
      <enum name="GL_CONSTANT_ALPHA"/>
      <enum name="GL_ONE_MINUS_CONSTANT_ALPHA"/>
      <!-- note: this is not valid for glBlendFuncSeparate 'sfactorRGB' or 'sfactorAlpha'-->
      <enum name="GL_SRC_ALPHA_SATURATE"/>
    </group>
    <group name="ShaderType" comment="used by glCreateShader">
      <enum name="GL_COMPUTE_SHADER"/>
      <enum name="GL_VERTEX_SHADER"/>
      <enum name="GL_TESS_CONTROL_SHADER"/>
      <enum name="GL_TESS_EVALUATION_SHADER"/>
      <enum name="GL_GEOMETRY_SHADER"/>
      <enum name="GL_FRAGMENT_SHADER"/>
    </group>
    <group name="PrecisionType" comment="used by glGetShaderPrecisionFormat">
      <enum name="GL_LOW_FLOAT"/>
      <enum name="GL_MEDIUM_FLOAT"/>
      <enum name="GL_HIGH_FLOAT"/>
      <enum name="GL_LOW_INT"/>
      <enum name="GL_MEDIUM_INT"/>
      <enum name="GL_HIGH_INT"/>
    </group>
    <group name="MipmapTarget" comment="used by glGenerateMipmap">
      <enum name="GL_TEXTURE_1D"/>
      <enum name="GL_TEXTURE_2D"/>
      <enum name="GL_TEXTURE_3D"/>
      <enum name="GL_TEXTURE_1D_ARRAY"/>
      <enum name="GL_TEXTURE_2D_ARRAY"/>
      <enum name="GL_TEXTURE_CUBE_MAP"/>
      <enum name="GL_TEXTURE_CUBE_MAP_ARRAY"/>
    </group>

    <group name="InternalFormat" comment="used by glRenderbufferStorage">
      <enum name="GL_R8"/>
      <enum name="GL_R8UI"/>
      <enum name="GL_R8I"/>
      <enum name="GL_R16UI"/>
      <enum name="GL_R16I"/>
      <enum name="GL_R32UI"/>
      <enum name="GL_R32I"/>
      <enum name="GL_RG8"/>
      <enum name="GL_RG8UI"/>  
      <enum name="GL_RG8I"/>
      <enum name="GL_RG16UI"/>   
      <enum name="GL_RG16I"/>
      <enum name="GL_RG32UI"/>   
      <enum name="GL_RG32I"/>  
      <enum name="GL_RGB8"/>
      <enum name="GL_RGB565"/>
      <enum name="GL_RGBA8"/>
      <enum name="GL_SRGB8_ALPHA8"/>
      <enum name="GL_RGB5_A1"/>
      <enum name="GL_RGBA4"/>
      <enum name="GL_RGB10_A2"/>
      <enum name="GL_RGBA8UI"/>
      <enum name="GL_RGBA8I"/>
      <enum name="GL_RGB10_A2UI"/>
      <enum name="GL_RGBA16UI"/>
      <enum name="GL_RGBA16I"/>
      <enum name="GL_RGBA32I"/>
      <enum name="GL_RGBA32UI"/>
      <enum name="GL_DEPTH_COMPONENT16"/>
      <enum name="GL_DEPTH_COMPONENT24"/>
      <enum name="GL_DEPTH_COMPONENT32F"/>
      <enum name="GL_DEPTH24_STENCIL8"/>
      <enum name="GL_DEPTH32F_STENCIL8"/>
      <enum name="GL_STENCIL_INDEX8"/>

      <!-- GL_EXT_texture_storage - TODO: add many others? -->
      <enum name="GL_BGRA8_EXT"/>
    </group>
    <group name="AttribType" comment="used by glGetActiveAttrib">
      <enum name="GL_FLOAT"/>
      <enum name="GL_FLOAT_VEC2"/>
      <enum name="GL_FLOAT_VEC3"/>
      <enum name="GL_FLOAT_VEC4"/>
      <enum name="GL_FLOAT_MAT2"/>
      <enum name="GL_FLOAT_MAT3"/>
      <enum name="GL_FLOAT_MAT4"/>
    </group>
    <group name="UniformType" comment="used by glGetActiveUniform">
      <enum name="GL_FLOAT"/>
      <enum name="GL_FLOAT_VEC2"/>
      <enum name="GL_FLOAT_VEC3"/>
      <enum name="GL_FLOAT_VEC4"/>
      <enum name="GL_INT"/>
      <enum name="GL_INT_VEC2"/>
      <enum name="GL_INT_VEC3"/>
      <enum name="GL_INT_VEC4"/>
      <enum name="GL_BOOL"/>
      <enum name="GL_BOOL_VEC2"/>
      <enum name="GL_BOOL_VEC3"/>
      <enum name="GL_BOOL_VEC4"/>
      <enum name="GL_FLOAT_MAT2"/>
      <enum name="GL_FLOAT_MAT3"/>
      <enum name="GL_FLOAT_MAT4"/>
      <enum name="GL_SAMPLER_2D"/>
      <enum name="GL_SAMPLER_CUBE"/>

      <!-- EXTENDED LIST (not GLES2)
      <enum name="GL_FLOAT"/>
      <enum name="GL_FLOAT_VEC2"/>
      <enum name="GL_FLOAT_VEC3"/>
      <enum name="GL_FLOAT_VEC4"/>
      <enum name="GL_DOUBLE"/>
      <enum name="GL_DOUBLE_VEC2"/>
      <enum name="GL_DOUBLE_VEC3"/>
      <enum name="GL_DOUBLE_VEC4"/>
      <enum name="GL_INT"/>
      <enum name="GL_INT_VEC2"/>
      <enum name="GL_INT_VEC3"/>
      <enum name="GL_INT_VEC4"/>
      <enum name="GL_UNSIGNED_INT"/>
      <enum name="GL_UNSIGNED_INT_VEC2"/>
      <enum name="GL_UNSIGNED_INT_VEC3"/>
      <enum name="GL_UNSIGNED_INT_VEC4"/>
      <enum name="GL_BOOL"/>
      <enum name="GL_BOOL_VEC2"/>
      <enum name="GL_BOOL_VEC3"/>
      <enum name="GL_BOOL_VEC4"/>
      <enum name="GL_FLOAT_MAT2"/>
      <enum name="GL_FLOAT_MAT3"/>
      <enum name="GL_FLOAT_MAT4"/>
      <enum name="GL_FLOAT_MAT2x3"/>
      <enum name="GL_FLOAT_MAT2x4"/>
      <enum name="GL_FLOAT_MAT3x2"/>
      <enum name="GL_FLOAT_MAT3x4"/>
      <enum name="GL_FLOAT_MAT4x2"/>
      <enum name="GL_FLOAT_MAT4x3"/>
      <enum name="GL_DOUBLE_MAT2"/>
      <enum name="GL_DOUBLE_MAT3"/>
      <enum name="GL_DOUBLE_MAT4"/>
      <enum name="GL_DOUBLE_MAT2x3"/>
      <enum name="GL_DOUBLE_MAT2x4"/>
      <enum name="GL_DOUBLE_MAT3x2"/>
      <enum name="GL_DOUBLE_MAT3x4"/>
      <enum name="GL_DOUBLE_MAT4x2"/>
      <enum name="GL_DOUBLE_MAT4x3"/>
      <enum name="GL_SAMPLER_1D"/>
      <enum name="GL_SAMPLER_2D"/>
      <enum name="GL_SAMPLER_3D"/>
      <enum name="GL_SAMPLER_CUBE"/>
      <enum name="GL_SAMPLER_1D_SHADOW"/>
      <enum name="GL_SAMPLER_2D_SHADOW"/>
      <enum name="GL_SAMPLER_1D_ARRAY"/>
      <enum name="GL_SAMPLER_2D_ARRAY"/>
      <enum name="GL_SAMPLER_1D_ARRAY_SHADOW"/>
      <enum name="GL_SAMPLER_2D_ARRAY_SHADOW"/>
      <enum name="GL_SAMPLER_2D_MULTISAMPLE"/>
      <enum name="GL_SAMPLER_2D_MULTISAMPLE_ARRAY"/>
      <enum name="GL_SAMPLER_CUBE_SHADOW"/>
      <enum name="GL_SAMPLER_BUFFER"/>
      <enum name="GL_SAMPLER_2D_RECT"/>
      <enum name="GL_SAMPLER_2D_RECT_SHADOW"/>
      <enum name="GL_INT_SAMPLER_1D"/>
      <enum name="GL_INT_SAMPLER_2D"/>
      <enum name="GL_INT_SAMPLER_3D"/>
      <enum name="GL_INT_SAMPLER_CUBE"/>
      <enum name="GL_INT_SAMPLER_1D_ARRAY"/>
      <enum name="GL_INT_SAMPLER_2D_ARRAY"/>
      <enum name="GL_INT_SAMPLER_2D_MULTISAMPLE"/>
      <enum name="GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"/>
      <enum name="GL_INT_SAMPLER_BUFFER"/>
      <enum name="GL_INT_SAMPLER_2D_RECT"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_1D"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_2D"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_3D"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_CUBE"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_1D_ARRAY"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_2D_ARRAY"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_BUFFER"/>
      <enum name="GL_UNSIGNED_INT_SAMPLER_2D_RECT"/>
      <enum name="GL_IMAGE_1D"/>
      <enum name="GL_IMAGE_2D"/>
      <enum name="GL_IMAGE_3D"/>
      <enum name="GL_IMAGE_2D_RECT"/>
      <enum name="GL_IMAGE_CUBE"/>
      <enum name="GL_IMAGE_BUFFER"/>
      <enum name="GL_IMAGE_1D_ARRAY"/>
      <enum name="GL_IMAGE_2D_ARRAY"/>
      <enum name="GL_IMAGE_2D_MULTISAMPLE"/>
      <enum name="GL_IMAGE_2D_MULTISAMPLE_ARRAY"/>
      <enum name="GL_INT_IMAGE_1D"/>
      <enum name="GL_INT_IMAGE_2D"/>
      <enum name="GL_INT_IMAGE_3D"/>
      <enum name="GL_INT_IMAGE_2D_RECT"/>
      <enum name="GL_INT_IMAGE_CUBE"/>
      <enum name="GL_INT_IMAGE_BUFFER"/>
      <enum name="GL_INT_IMAGE_1D_ARRAY"/>
      <enum name="GL_INT_IMAGE_2D_ARRAY"/>
      <enum name="GL_INT_IMAGE_2D_MULTISAMPLE"/>
      <enum name="GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_1D"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_2D"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_3D"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_2D_RECT"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_CUBE"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_BUFFER"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_1D_ARRAY"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_2D_ARRAY"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE"/>
      <enum name="GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY"/>
      <enum name="GL_UNSIGNED_INT_ATOMIC_COUNTER"/>
      -->
    </group>

    <!-- TODO: this is only GLES2 stuff for now -->
    <group name="GetPName">
      <enum name="GL_ACTIVE_TEXTURE"/>
      <enum name="GL_ALIASED_LINE_WIDTH_RANGE"/>
      <enum name="GL_ALIASED_POINT_SIZE_RANGE"/>
      <enum name="GL_ALPHA_BITS"/>
      <enum name="GL_ARRAY_BUFFER_BINDING"/>
      <enum name="GL_BLEND"/>
      <enum name="GL_BLEND_COLOR"/>
      <enum name="GL_BLEND_DST_ALPHA"/>
      <enum name="GL_BLEND_DST_RGB"/>
      <enum name="GL_BLEND_EQUATION_ALPHA"/>
      <enum name="GL_BLEND_EQUATION_RGB"/>
      <enum name="GL_BLEND_SRC_ALPHA"/>
      <enum name="GL_BLEND_SRC_RGB"/>
      <enum name="GL_BLUE_BITS"/>
      <enum name="GL_COLOR_CLEAR_VALUE"/>
      <enum name="GL_COLOR_WRITEMASK"/>
      <enum name="GL_COMPRESSED_TEXTURE_FORMATS"/>
      <enum name="GL_CULL_FACE"/>
      <enum name="GL_CULL_FACE_MODE"/>
      <enum name="GL_CURRENT_PROGRAM"/>
      <enum name="GL_DEPTH_BITS"/>
      <enum name="GL_DEPTH_CLEAR_VALUE"/>
      <enum name="GL_DEPTH_FUNC"/>
      <enum name="GL_DEPTH_RANGE"/>
      <enum name="GL_DEPTH_TEST"/>
      <enum name="GL_DEPTH_WRITEMASK"/>
      <enum name="GL_DITHER"/>
      <enum name="GL_ELEMENT_ARRAY_BUFFER_BINDING"/>
      <enum name="GL_FRAMEBUFFER_BINDING"/>
      <enum name="GL_FRONT_FACE"/>
      <enum name="GL_GENERATE_MIPMAP_HINT"/>
      <enum name="GL_GREEN_BITS"/>
      <enum name="GL_IMPLEMENTATION_COLOR_READ_FORMAT"/>
      <enum name="GL_IMPLEMENTATION_COLOR_READ_TYPE"/>
      <enum name="GL_LINE_WIDTH"/>
      <enum name="GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS"/>
      <enum name="GL_MAX_CUBE_MAP_TEXTURE_SIZE"/>
      <enum name="GL_MAX_FRAGMENT_UNIFORM_VECTORS"/>
      <enum name="GL_MAX_RENDERBUFFER_SIZE"/>
      <enum name="GL_MAX_TEXTURE_IMAGE_UNITS"/>
      <enum name="GL_MAX_TEXTURE_SIZE"/>
      <enum name="GL_MAX_VARYING_VECTORS"/>
      <enum name="GL_MAX_VERTEX_ATTRIBS"/>
      <enum name="GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS"/>
      <enum name="GL_MAX_VERTEX_UNIFORM_VECTORS"/>
      <enum name="GL_MAX_VIEWPORT_DIMS"/>
      <enum name="GL_NUM_COMPRESSED_TEXTURE_FORMATS"/>
      <enum name="GL_NUM_SHADER_BINARY_FORMATS"/>
      <enum name="GL_PACK_ALIGNMENT"/>
      <enum name="GL_POLYGON_OFFSET_FACTOR"/>
      <enum name="GL_POLYGON_OFFSET_FILL"/>
      <enum name="GL_POLYGON_OFFSET_UNITS"/>
      <enum name="GL_RED_BITS"/>
      <enum name="GL_RENDERBUFFER_BINDING"/>
      <enum name="GL_SAMPLE_ALPHA_TO_COVERAGE"/>
      <enum name="GL_SAMPLE_BUFFERS"/>
      <enum name="GL_SAMPLE_COVERAGE"/>
      <enum name="GL_SAMPLE_COVERAGE_INVERT"/>
      <enum name="GL_SAMPLE_COVERAGE_VALUE"/>
      <enum name="GL_SAMPLES"/>
      <enum name="GL_SCISSOR_BOX"/>
      <enum name="GL_SCISSOR_TEST"/>
      <enum name="GL_SHADER_BINARY_FORMATS"/>
      <enum name="GL_SHADER_COMPILER"/>
      <enum name="GL_STENCIL_BACK_FAIL"/>
      <enum name="GL_STENCIL_BACK_FUNC"/>
      <enum name="GL_STENCIL_BACK_PASS_DEPTH_FAIL"/>
      <enum name="GL_STENCIL_BACK_PASS_DEPTH_PASS"/>
      <enum name="GL_STENCIL_BACK_REF"/>
      <enum name="GL_STENCIL_BACK_VALUE_MASK"/>
      <enum name="GL_STENCIL_BACK_WRITEMASK"/>
      <enum name="GL_STENCIL_BITS"/>
      <enum name="GL_STENCIL_CLEAR_VALUE"/>
      <enum name="GL_STENCIL_FAIL"/>
      <enum name="GL_STENCIL_FUNC"/>
      <enum name="GL_STENCIL_PASS_DEPTH_FAIL"/>
      <enum name="GL_STENCIL_PASS_DEPTH_PASS"/>
      <enum name="GL_STENCIL_REF"/>
      <enum name="GL_STENCIL_TEST"/>
      <enum name="GL_STENCIL_VALUE_MASK"/>
      <enum name="GL_STENCIL_WRITEMASK"/>
      <enum name="GL_SUBPIXEL_BITS"/>
      <enum name="GL_TEXTURE_BINDING_2D"/>
      <enum name="GL_TEXTURE_BINDING_CUBE_MAP"/>
      <enum name="GL_UNPACK_ALIGNMENT"/>
      <enum name="GL_VIEWPORT"/>
    </group>    
    <group name="FramebufferStatus" comment="used by glCheckFramebufferStatus">
      <enum name="GL_FRAMEBUFFER_COMPLETE"/>
      <enum name="GL_FRAMEBUFFER_UNDEFINED"/>
      <enum name="GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"/>
      <enum name="GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"/>
      <enum name="GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER"/>
      <enum name="GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS"/>
      <enum name="GL_FRAMEBUFFER_UNSUPPORTED"/>
      <enum name="GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"/>
      <enum name="GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS"/>
    </group>
    <group name="GetShaderivPName" comment="used by glGetShaderiv">
      <enum name="GL_SHADER_TYPE"/>
      <enum name="GL_DELETE_STATUS"/>
      <enum name="GL_COMPILE_STATUS"/>
      <enum name="GL_INFO_LOG_LENGTH"/>
      <enum name="GL_SHADER_SOURCE_LENGTH"/>
    </group>
    <group name="GetProgramivPName" comment="used by glGetProgramiv">
      <enum name="GL_DELETE_STATUS"/>
      <enum name="GL_LINK_STATUS"/>
      <enum name="GL_VALIDATE_STATUS"/>
      <enum name="GL_INFO_LOG_LENGTH"/>
      <enum name="GL_ATTACHED_SHADERS"/>
      <enum name="GL_ACTIVE_ATTRIBUTES"/>
      <enum name="GL_ACTIVE_ATTRIBUTE_MAX_LENGTH"/>
      <enum name="GL_ACTIVE_UNIFORMS"/>
      <enum name="GL_ACTIVE_UNIFORM_MAX_LENGTH"/>
    </group>
    <group name="FramebufferTextureTarget" comment="used by glFramebufferTexture2D">
      <enum name="GL_TEXTURE_2D"/>
      <enum name="GL_TEXTURE_CUBE_MAP_POSITIVE_X"/>
      <enum name="GL_TEXTURE_CUBE_MAP_NEGATIVE_X"/>
      <enum name="GL_TEXTURE_CUBE_MAP_POSITIVE_Y"/>
      <enum name="GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"/>
      <enum name="GL_TEXTURE_CUBE_MAP_POSITIVE_Z"/>
      <enum name="GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"/>
    </group>

    <!-- this was somehow missing GL_TEXTURE_CUBE_MAP -->
    <group name="TextureTarget">
      <enum name="GL_DETAIL_TEXTURE_2D_SGIS"/>
      <enum name="GL_PROXY_TEXTURE_1D"/>
      <enum name="GL_PROXY_TEXTURE_1D_EXT"/>
      <enum name="GL_PROXY_TEXTURE_2D"/>
      <enum name="GL_PROXY_TEXTURE_2D_EXT"/>
      <enum name="GL_PROXY_TEXTURE_3D"/>
      <enum name="GL_PROXY_TEXTURE_3D_EXT"/>
      <enum name="GL_PROXY_TEXTURE_4D_SGIS"/>
      <enum name="GL_TEXTURE_1D"/>
      <enum name="GL_TEXTURE_2D"/>
      <enum name="GL_TEXTURE_CUBE_MAP"/> <!-- added here -->
      <enum name="GL_TEXTURE_3D"/>
      <enum name="GL_TEXTURE_3D_EXT"/>
      <enum name="GL_TEXTURE_3D_OES"/>
      <enum name="GL_TEXTURE_4D_SGIS"/>
      <enum name="GL_TEXTURE_BASE_LEVEL"/>
      <enum name="GL_TEXTURE_BASE_LEVEL_SGIS"/>
      <enum name="GL_TEXTURE_MAX_LEVEL"/>
      <enum name="GL_TEXTURE_MAX_LEVEL_SGIS"/>
      <enum name="GL_TEXTURE_MAX_LOD"/>
      <enum name="GL_TEXTURE_MAX_LOD_SGIS"/>
      <enum name="GL_TEXTURE_MIN_LOD"/>
      <enum name="GL_TEXTURE_MIN_LOD_SGIS"/>
    </group>

    <!-- created to replace TextureTarget for glBindTexture -->
    <!-- TODO: should this totally replace TextureTarget? only used by glGetTexParameter -->
    <group name="TextureImageTarget">
      <enum name="GL_TEXTURE_2D"/>
      <enum name="GL_PROXY_TEXTURE_2D"/>
      <enum name="GL_TEXTURE_1D_ARRAY"/>
      <enum name="GL_PROXY_TEXTURE_1D_ARRAY"/>
      <enum name="GL_TEXTURE_RECTANGLE"/>
      <enum name="GL_PROXY_TEXTURE_RECTANGLE"/>
      <enum name="GL_TEXTURE_CUBE_MAP_POSITIVE_X"/>
      <enum name="GL_TEXTURE_CUBE_MAP_NEGATIVE_X"/>
      <enum name="GL_TEXTURE_CUBE_MAP_POSITIVE_Y"/>
      <enum name="GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"/>
      <enum name="GL_TEXTURE_CUBE_MAP_POSITIVE_Z"/>
      <enum name="GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"/>
      <enum name="GL_PROXY_TEXTURE_CUBE_MAP"/>
    </group>
  </groups>

  <commands>
    <!-- TODO: incorporate patches from https://github.com/hpicgs/glbinding/blob/master/codegeneration/patch.xml ? -->
    <command>
      <proto><ptype>GLenum</ptype> <name>glPathGlyphIndexRangeNV</name></proto>
      <param><ptype>GLenum</ptype> <name>fontTarget</name></param>
      <param>const void *<name>fontName</name></param>
      <param><ptype>GLbitfield</ptype> <name>fontStyle</name></param>
      <param><ptype>GLuint</ptype> <name>pathParameterTemplate</name></param>
      <param><ptype>GLfloat</ptype> <name>emScale</name></param>
      <param><ptype>GLuint *</ptype> <name>baseAndCount</name></param>
    </command>
    <command> <!-- added paramter group -->
      <proto><ptype>GLuint</ptype> <name>glCreateShader</name></proto>
      <param group="ShaderType"><ptype>GLenum</ptype> <name>type</name></param>
    </command>
    <command>
      <proto>void <name>glGetShaderPrecisionFormat</name></proto>
      <param group="ShaderType"><ptype>GLenum</ptype> <name>shadertype</name></param>
      <param group="PrecisionType"><ptype>GLenum</ptype> <name>precisiontype</name></param>
      <param len="2"><ptype>GLint</ptype> *<name>range</name></param>
      <param len="2"><ptype>GLint</ptype> *<name>precision</name></param>
    </command>
    <command> <!-- added paramter group -->
      <proto>void <name>glGenerateMipmap</name></proto>
      <param group="MipmapTarget"><ptype>GLenum</ptype> <name>target</name></param>
      <glx type="render" opcode="4325"/>
    </command>
    <command>
      <proto>void <name>glRenderbufferStorage</name></proto>
      <param group="RenderbufferTarget"><ptype>GLenum</ptype> <name>target</name></param>
      <param group="InternalFormat"><ptype>GLenum</ptype> <name>internalformat</name></param>
      <param><ptype>GLsizei</ptype> <name>width</name></param>
      <param><ptype>GLsizei</ptype> <name>height</name></param>
      <glx type="render" opcode="4318"/>
    </command>
    <command>
      <proto>void <name>glRenderbufferStorageMultisample</name></proto>
      <param group="RenderbufferTarget"><ptype>GLenum</ptype> <name>target</name></param>
      <param><ptype>GLsizei</ptype> <name>samples</name></param>
      <param group="InternalFormat"><ptype>GLenum</ptype> <name>internalformat</name></param>
      <param><ptype>GLsizei</ptype> <name>width</name></param>
      <param><ptype>GLsizei</ptype> <name>height</name></param>
      <glx type="render" opcode="4331"/>
    </command>
    <command>
      <proto group="FramebufferStatus"><ptype>GLenum</ptype> <name>glCheckFramebufferStatus</name></proto>
      <param group="FramebufferTarget"><ptype>GLenum</ptype> <name>target</name></param>
      <glx type="vendor" opcode="1427"/>
    </command>

    <!-- replaced TextureTarget with the new TextureImageTarget -->
    <command>
      <proto>void <name>glTexImage2D</name></proto>
      <param group="TextureImageTarget"><ptype>GLenum</ptype> <name>target</name></param>
      <param group="CheckedInt32"><ptype>GLint</ptype> <name>level</name></param>
      <param group="TextureComponentCount"><ptype>GLint</ptype> <name>internalformat</name></param>
      <param><ptype>GLsizei</ptype> <name>width</name></param>
      <param><ptype>GLsizei</ptype> <name>height</name></param>
      <param group="CheckedInt32"><ptype>GLint</ptype> <name>border</name></param>
      <param group="PixelFormat"><ptype>GLenum</ptype> <name>format</name></param>
      <param group="PixelType"><ptype>GLenum</ptype> <name>type</name></param>
      <param len="COMPSIZE(format,type,width,height)">const void *<name>pixels</name></param>
      <glx type="render" opcode="110"/>
      <glx type="render" opcode="329" name="glTexImage2DPBO" comment="PBO protocol"/>
    </command>

    <!-- used by gles2 extensions -->
    <command>
      <proto>void <name>glUseProgramStages</name></proto>
      <param><ptype>GLuint</ptype> <name>pipeline</name></param>
      <param group="UseProgramStageMask"><ptype>GLbitfield</ptype> <name>stages</name></param>
      <param><ptype>GLuint</ptype> <name>program</name></param>
    </command>

    <!-- ANGLE implements 'indices' as 'const void **' (not const void * const *) -->
    <command>
      <proto>void <name>glMultiDrawElementsEXT</name></proto>
      <param group="PrimitiveType"><ptype>GLenum</ptype> <name>mode</name></param>
      <param len="COMPSIZE(primcount)">const <ptype>GLsizei</ptype> *<name>count</name></param>
      <param group="DrawElementsType"><ptype>GLenum</ptype> <name>type</name></param>
      <param len="COMPSIZE(primcount)">const void * *<name>indices</name></param>
      <param><ptype>GLsizei</ptype> <name>primcount</name></param>
      <alias name="glMultiDrawElements"/>
    </command>

    <!-- TODO: should all 'GLboolean' parameters implicitly have 'group="Boolean"' ? -->
    <command>
      <proto>void <name>glCoverageMaskNV</name></proto>
      <param group="Boolean"><ptype>GLboolean</ptype> <name>mask</name></param>
    </command>

    <command>
      <proto>void <name>glGetShaderiv</name></proto>
      <param><ptype>GLuint</ptype> <name>shader</name></param>
      <param group="GetShaderivPName"><ptype>GLenum</ptype> <name>pname</name></param>
      <param len="COMPSIZE(pname)"><ptype>GLint</ptype> *<name>params</name></param>
      <glx type="single" opcode="198"/>
    </command>
    <command>
      <proto>void <name>glGetProgramiv</name></proto>
      <param><ptype>GLuint</ptype> <name>program</name></param>
      <param group="GetProgramivPName"><ptype>GLenum</ptype> <name>pname</name></param>
      <param len="COMPSIZE(pname)"><ptype>GLint</ptype> *<name>params</name></param>
      <glx type="single" opcode="199"/>
    </command>

    <command>
      <proto>void <name>glGetActiveUniform</name></proto>
      <param><ptype>GLuint</ptype> <name>program</name></param>
      <param><ptype>GLuint</ptype> <name>index</name></param>
      <param><ptype>GLsizei</ptype> <name>bufSize</name></param>
      <param len="1"><ptype>GLsizei</ptype> *<name>length</name></param>
      <param len="1"><ptype>GLint</ptype> *<name>size</name></param>
      <param group="UniformType" len="1"><ptype>GLenum</ptype> *<name>type</name></param>
      <param len="bufSize"><ptype>GLchar</ptype> *<name>name</name></param>
    </command>
    <command>
      <proto>void <name>glGetActiveAttrib</name></proto>
      <param><ptype>GLuint</ptype> <name>program</name></param>
      <param><ptype>GLuint</ptype> <name>index</name></param>
      <param><ptype>GLsizei</ptype> <name>bufSize</name></param>
      <param len="1"><ptype>GLsizei</ptype> *<name>length</name></param>
      <param len="1"><ptype>GLint</ptype> *<name>size</name></param>
      <param group="AttribType" len="1"><ptype>GLenum</ptype> *<name>type</name></param>
      <param len="bufSize"><ptype>GLchar</ptype> *<name>name</name></param>
    </command>
    <command>
      <proto>void <name>glFramebufferTexture2D</name></proto>
      <param group="FramebufferTarget"><ptype>GLenum</ptype> <name>target</name></param>
      <param group="FramebufferAttachment"><ptype>GLenum</ptype> <name>attachment</name></param>
      <param group="FramebufferTextureTarget"><ptype>GLenum</ptype> <name>textarget</name></param>
      <param><ptype>GLuint</ptype> <name>texture</name></param>
      <param><ptype>GLint</ptype> <name>level</name></param>
      <glx type="render" opcode="4322"/>
    </command>
  </commands>
</registry>
